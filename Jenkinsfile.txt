#!groovy
import groovy.json.JsonSlurperClassic
node {

	def BUILD_NUMBER=env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR="tests/${BUILD_NUMBER}"
    def SFDC_USERNAME

	
    def CONNECTED_APP_CONSUMER_KEY="3MVG9WVXk15qiz1J7cu9IlavNr.AWS435dwUVopFudA.O5DGhZ7QoP49guqLmzqmgbA_JknOI4DFsPogdVRv9"
    def HUB_ORG="chandradev1@kloudrac.com"
    def JWT_KEY_CRED_ID="1fde5a5a-3987-4fbb-b1a6-a236ee570232"
    def DEPLOYDIR='force-app/main/default/'
    
    def SFDC_HOST = env.SFDC_HOST ?: "https://login.salesforce.com"
    def TEST_LEVEL = 'RunLocalTests'
	println 'KEY IS' 
    println JWT_KEY_CRED_ID
    println HUB_ORG
    println SFDC_HOST
    println CONNECTED_APP_CONSUMER_KEY
	println env.PATH
    def toolbelt = tool 'toolbelt'

    def GITHUB_TOKEN_CREDENTIALS_ID = 'GITHUB_TOKEN' // Set your GitHub token credentials ID here
    println env.PATH
	echo env.BRANCH_NAME
    


    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------

    stage('checkout source') {
        checkout scm
    }
     

    

    // Run all the enclosed stages with access to the Salesforce JWT key credentials.
    withEnv(["HOME=${env.WORKSPACE}"]) {    
        echo "Workspace path is: ${env.WORKSPACE}"
        withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'JWT_KEY_CRED_ID')]) {
            // Authenticate to Salesforce using the server key.
            stage('Authorize to Salesforce') {
                if (isUnix()) {
                    // Unix/Linux-based command
                    rc = sh """
    "C:\\Program Files\\sf\\bin\\sfdx" auth:jwt:grant --instanceurl https://login.salesforce.com --clientid 3MVG9WVXk15qiz1J7cu9IlavNr.AWS435dwUVopFudA.O5DGhZ7QoP49guqLmzqmgbA_JknOI4DFsPogdVRv9 --jwtkeyfile "C:\\openssl\\bin\\server.key" --username chandradev1@kloudrac.com --setalias chandradev1
"""


                } else {
                    // Windows-based command
                   rc = command """
    "C:\\Program Files\\sf\\bin\\sfdx" auth:jwt:grant --instanceurl https://login.salesforce.com --clientid 3MVG9WVXk15qiz1J7cu9IlavNr.AWS435dwUVopFudA.O5DGhZ7QoP49guqLmzqmgbA_JknOI4DFsPogdVRv9 --jwtkeyfile "C:\\openssl\\bin\\server.key" --username chandradev1@kloudrac.com --setalias chandradev1
"""
                    echo "Return code: ${rc}"
                    rc = command """
                        "C:\\Program Files\\sf\\bin\\sfdx" force:config:set defaultusername=chandradev1
                    """

                }

                echo "Return code: ${rc}"
                
                echo "auth success"
            }
		if (env.BRANCH_NAME.startsWith('PR')) {
		echo "isPullRequest"
                stage('Create Package for Pull Request') {
                    echo "Creating package for validation in PR #${env.CHANGE_ID}"

                    // Identify changed files in the PR and create a package.xml
                    def changedFiles = sh(script: 'git diff --name-only HEAD~1', returnStdout: true).trim().split('\n')
                    def packageXmlContent = createPackageXml(changedFiles)
                    writeFile file: 'package/package.xml', text: packageXmlContent

                    stage('Validate Package') {
                        def validateCommand = """
                        "C:\\Program Files\\sf\\bin\\sfdx" project deploy start \
                        --checkonly --manifest ${env.WORKSPACE}/package/package.xml \
                        --targetusername chandradev1 --testlevel ${TEST_LEVEL} --wait 10 --json
                        """
                        def rc = command(validateCommand)
                        if (rc == 0) {
                            echo "Package validation succeeded"
                            // Extract package ID from JSON response (assuming we captured JSON output)
                            validatedPackageId = extractPackageId('validateOutput.json')
                        } else {
                            error "Package validation failed"
                        }
                    }
                }
            }

            // Deploy metadata and execute unit tests.
            stage('Deploy and Run Tests') {
                if (isUnix()) {
                    // Unix/Linux-based command
                    rc = command "${toolbelt}/sfdx force:mdapi:deploy --wait 10 --deploydir ${DEPLOYDIR} --targetusername chandradev1 --testlevel ${TEST_LEVEL}"
                } else {
                    // Windows-based command
                    rc = command """
                    "C:\\Program Files\\sf\\bin\\sfdx" force:mdapi:deploy --checkonly --wait 10 --deploydir ${env.WORKSPACE}\\manifest\\  --targetusername chandradev1 --testlevel RunLocalTests  --json
                    """
                }

                echo "Return code: ${rc}"
            }
        }
    }
}

def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
		return bat(returnStatus: true, script: script);
    }
}
