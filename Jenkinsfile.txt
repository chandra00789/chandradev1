import groovy.json.JsonSlurperClassic
import groovy.json.JsonSlurper
properties([
    pipelineTriggers([
        issueCommentTrigger('.*test this please.*')
    ])
])
node {
    stage('check trigger cause') {
        // Parse the payload safely
        def payload = new JsonSlurper().parseText(params.payload ?: '{}')

        // Safely get build causes and convert them to a readable string
        def causes = currentBuild.getBuildCauses()
        echo "Current build causes: ${causes.collect { it.toString() }.join(', ')}"
        def triggerCause = currentBuild.rawBuild.getCause(org.jenkinsci.plugins.pipeline.github.trigger.IssueCommentCause)

        if (triggerCause) {
            echo("Build was started by ${triggerCause.userLogin}, who wrote: " +
                 "\"${triggerCause.comment}\", which matches the " +
                 "\"${triggerCause.triggerPattern}\" trigger pattern.")
        } else {
            echo('Build was not started by a comment trigger.')
            // Add a comment to notify the user how to trigger builds with test classes
            echo 'Adding comment to the PR.'
            def comment = pullRequest.comment("No test classes specified in the comment. Example: 'test this please. TestClass1, TestClass2'")
            error "No test classes specified in the comment. Example: 'test this please. TestClass1, TestClass2'"
        }

        // Extract test class names from the comment
        def commentText = triggerCause.comment
        def match = (commentText =~ /test this please\.(.*)/)
        if (!match) {
            error "No test classes specified in the comment. Example: 'test this please. TestClass1, TestClass2'"
        }
        def testClasses = match[0][1].trim().split(/\s*,\s*/)
        echo "Extracted test classes: ${testClasses.join(', ')}"

        // Store test classes to be used later
        env.TEST_CLASSES = testClasses.join(',')
        echo TEST_CLASSES

       }
}
node {
def BUILD_NUMBER=env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR="tests/${BUILD_NUMBER}"
    def SFDC_USERNAME

	
    def CONNECTED_APP_CONSUMER_KEY="3MVG9WVXk15qiz1J7cu9IlavNr.AWS435dwUVopFudA.O5DGhZ7QoP49guqLmzqmgbA_JknOI4DFsPogdVRv9"
    def HUB_ORG="chandradev1@kloudrac.com"
    def JWT_KEY_CRED_ID="1fde5a5a-3987-4fbb-b1a6-a236ee570232"
    def DEPLOYDIR='force-app/main/default/'
    
    def SFDC_HOST = env.SFDC_HOST ?: "https://login.salesforce.com"
    def TEST_LEVEL = 'RunLocalTests'
	println 'KEY IS' 
    println JWT_KEY_CRED_ID
    println HUB_ORG
    println SFDC_HOST
    println CONNECTED_APP_CONSUMER_KEY
	println env.PATH
    def toolbelt = tool 'toolbelt'
    def changedFiles
    def salesforceFiles
    def GITHUB_TOKEN_CREDENTIALS_ID = 'GITHUB_TOKEN' // Set your GitHub token credentials ID here
    println env.PATH
    def execute =true 
	echo env.BRANCH_NAME

    echo "Hello"


    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------
	stage('Cleanup Workspace') {
    cleanWs()
}
    stage('checkout source') {
if (env.BRANCH_NAME.startsWith('PR')) {
    checkout([$class: 'GitSCM', branches: [[name: '*/SandBranch']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkinstestcpr', url: 'https://github.com/chandra00789/chandradev1.git']]])
	// Fetch the main branch explicitly
    bat(script: """C:\\Users\\Kloudrac\\AppData\\Local\\Programs\\Git\\bin\\git.exe fetch origin main""")
    
    // Check if the main branch is present locally
    bat(script: """C:\\Users\\Kloudrac\\AppData\\Local\\Programs\\Git\\bin\\git.exe checkout main""")

// Return to SandBranch
    bat(script: """C:\\Users\\Kloudrac\\AppData\\Local\\Programs\\Git\\bin\\git.exe checkout SandBranch""")
	changedFiles = bat(
                    script: """C:\\Users\\Kloudrac\\AppData\\Local\\Programs\\Git\\bin\\git.exe diff --name-only main""",
                    returnStdout: true
                ).trim().split('\n')
                echo "Changed files: ${changedFiles.join(', ')}"
    }
	else if(env.BRANCH_NAME == 'main')
	{
	checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkinstestcpr', url: 'https://github.com/chandra00789/chandradev1.git']]])
	bat(script: """C:\\Users\\Kloudrac\\AppData\\Local\\Programs\\Git\\bin\\git.exe fetch origin main""")
        bat(script: """C:\\Users\\Kloudrac\\AppData\\Local\\Programs\\Git\\bin\\git.exe checkout -B main origin/main""")

        // Identify all changes since the last successful deployment
        changedFiles = bat(
            script: """C:\\Users\\Kloudrac\\AppData\\Local\\Programs\\Git\\bin\\git.exe diff --name-only HEAD~1 main""",
            returnStdout: true
        ).trim().split('\n')
	                echo "Changed files: ${changedFiles.join(', ')}"
	
	
	}
}

     

    

    // Run all the enclosed stages with access to the Salesforce JWT key credentials.
    withEnv(["HOME=${env.WORKSPACE}"]) {    
        echo "Workspace path is: ${env.WORKSPACE}"
        withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'JWT_KEY_CRED_ID')]) {
            // Authenticate to Salesforce using the server key.
            stage('Authorize to Salesforce') {
                if (isUnix()) {
                    // Unix/Linux-based command
                    rc = sh """
    "C:\\Program Files\\sf\\bin\\sfdx" auth:jwt:grant --instanceurl https://login.salesforce.com --clientid 3MVG9WVXk15qiz1J7cu9IlavNr.AWS435dwUVopFudA.O5DGhZ7QoP49guqLmzqmgbA_JknOI4DFsPogdVRv9 --jwtkeyfile "C:\\openssl\\bin\\server.key" --username chandradev1@kloudrac.com --setalias chandradev1
"""


                } else {
                    // Windows-based command
                   rc = command """
    "C:\\Program Files\\sf\\bin\\sfdx" auth:jwt:grant --instanceurl https://login.salesforce.com --clientid 3MVG9WVXk15qiz1J7cu9IlavNr.AWS435dwUVopFudA.O5DGhZ7QoP49guqLmzqmgbA_JknOI4DFsPogdVRv9 --jwtkeyfile "C:\\openssl\\bin\\server.key" --username chandradev1@kloudrac.com --setalias chandradev1
"""
                    echo "Return code: ${rc}"
                    rc = command """
                        "C:\\Program Files\\sf\\bin\\sfdx" force:config:set defaultusername=chandradev1
                    """

                }

                echo "Return code: ${rc}"
                
                echo "auth success"
            }
	 stage('Create Package for Pull Request') {
                echo "Creating package for validation in PR #${env.CHANGE_ID}"
                // Step 2: Filter Salesforce Metadata Files
            salesforceFiles = changedFiles.findAll { filePath ->
		    filePath.contains('force-app')
		}
            echo "Filtered Salesforce Files: ${salesforceFiles.join(', ')}"

            if (salesforceFiles.isEmpty()) {
                echo "No Salesforce metadata files to deploy."
		execute=false
                return
            }
            }


            

		if (env.BRANCH_NAME.startsWith('PR') && execute) {
                echo "isPullRequest"
                echo "Processing Pull Request for branch: ${env.BRANCH_NAME}"
		stage('Validate Package') {
                echo "Validating package.xml"
                try {
                    // Run Salesforce CLI validation command
                    def validateCommand = """
                    "C:\\Program Files\\sf\\bin\\sfdx" force:source:deploy --checkonly -p "${salesforceFiles.join(',')}" --targetusername chandradev1 --testlevel RunSpecifiedTests --runtests ${env.TEST_CLASSES} --wait 10 --verbose --json
                    """
                    def output = bat(returnStdout: true, script: validateCommand)
                def deploymentInfo = new JsonSlurper().parseText(output)
                if (deploymentInfo.status == 'Succeeded') {
                    echo "Package validation succeeded."
                    env.DEPLOYMENT_ID = deploymentInfo.result.id
                    echo "Stored Deployment ID: ${env.DEPLOYMENT_ID}"
                } else {
                    error "Validation failed. Check logs for details."
                }
                } catch (Exception e) {
                    error "Validation failed with error: ${e.getMessage()}"
                }
            }
        }
	    else if (env.BRANCH_NAME == 'main' && execute) {
	      stage('Deploy and Run Tests') {

                if (isUnix()) {
                    // Unix/Linux-based command
                    rc = command "${toolbelt}/sfdx force:mdapi:deploy --wait 10 --deploydir ${DEPLOYDIR} --targetusername chandradev1 --testlevel ${TEST_LEVEL}"
                } else {
                    if (env.DEPLOYMENT_ID) {
                    def quickDeployCommand = """
                    "C:\\Program Files\\sf\\bin\\sfdx" force:mdapi:deploy --validateddeployrequestid ${env.DEPLOYMENT_ID} --targetusername chandradev1 --wait 10 --verbose
                    """
                    def rc = bat(returnStatus: true, script: quickDeployCommand)
                    if (rc == 0) {
                        echo "Quick deploy succeeded."
                    } else {
                        error "Quick deploy failed."
                    }
                } else {
                    error "No Deployment ID available for quick deploy."
                }
                }
	    }

        }
        
    }
    }
}
def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
		return bat(returnStatus: true, script: script);
    }
}


